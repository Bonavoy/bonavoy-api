// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  username       String           @unique
  firstname      String
  lastname       String
  password       String
  avatar         String?
  verified       Boolean          @default(false)
  AuthorsOnTrips AuthorsOnTrips[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model AuthorsOnTrips {
  id     String   @id @default(uuid())
  userId String
  user   User     @relation(fields: [userId], references: [id])
  role   TripRole
  tripId String
  trip   Trip     @relation(fields: [tripId], references: [id])

  @@unique([userId, tripId], name: "authorOnTripIdentifier")
}

model Trip {
  id        String           @id @default(uuid())
  name      String
  banner    String
  startDate DateTime
  endDate   DateTime
  authors   AuthorsOnTrips[]
  places    Place[]
  invites   Invite[]
  isPublic  Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Place {
  id             String           @id @default(uuid())
  tripId         String
  mapboxId       String
  placeName      String
  text           String
  startDate      DateTime?
  endDate        DateTime?
  colour         String
  center         Float[]
  country        String
  trip           Trip             @relation(fields: [tripId], references: [id], onDelete: Cascade)
  transportation Transportation[]
  dayPlans       DayPlan[]
  order          Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model Transportation {
  id                String             @id @default(uuid())
  type              TransportationType
  connectingOrder   Int                @default(0)
  connectingId      String             @default(uuid())
  place             Place              @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId           String
  departureLocation String
  departureTime     DateTime?
  arrivalLocation   String
  arrivalTime       DateTime?
  details           String             @db.VarChar(300)
  order             Int                @default(0)
  departureLng      Float?
  departureLat      Float?
  arrivalLng        Float?
  arrivalLat        Float?
  fileAttachments   FileAttachment[]
}

model DayPlan {
  id         String     @id @default(uuid())
  date       DateTime
  order      Int
  placeId    String
  place      Place      @relation(fields: [placeId], references: [id], onDelete: Cascade)
  activities Activity[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Activity {
  id        String    @id @default(uuid())
  name      String
  order     Int
  startTime DateTime?
  endTime   DateTime?
  dayPlanId String
  dayPlan   DayPlan   @relation(fields: [dayPlanId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model FileAttachment {
  id               String         @id @default(uuid())
  path             String
  transportation   Transportation @relation(fields: [transportationId], references: [id], onDelete: Cascade)
  transportationId String
}

enum TripRole {
  AUTHOR
  EDITOR
  VIEWER
}

enum TransportationType {
  CAR
  PLANE
  BUS
}

model Invite {
  id     String   @id @default(uuid())
  email  String
  tripId String
  trip   Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  role   TripRole
  code   String

  @@unique([email, tripId], name: "inviteIdentifier")
}
